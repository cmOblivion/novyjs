function t(){let t=0;return()=>t++}let e=(t,e)=>{return(null==(l=t)?String(l):l.constructor.name)===e;var l};class l{#t=t();constructor(){this.#t=t(),this.$events={}}$heard(t){return Reflect.has(this.$events,t)}$on(t,e){Reflect.has(e,"#uuid")&&(e.$uuid=this.#t());let l=t.split("."),c=this.$events;for(let t of l)Reflect.has(c,t)||(c[t]={$cb:[]}),c=c[t];return c.$cb.push(e),this}$$runCallback(t,...e){for(let l in t)if("$cb"===l)for(let l of t.$cb)l(...e);else this.$$runCallback(t[l])}$emit(t,...e){var l=t.split(".");let c=this.$events;for(let t of l)c[t]&&(c=c[t]);return this.$$runCallback(c,...e),this}$off(t,l){var c=t.split(".");let n=this.$events;for(let t of c)n[t]&&(n=n[t]);if(e(l,"Function")){if(Reflect.has(n,"$cb"))for(let t in n.$cb)n.$cb[t].$uuid===l.uuid&&delete n.$cb[t]}else n.$cb=[];return this}}class c extends l{constructor(){super(),this.$lockFunc=null}lock(t){this.$lockFunc=t}unlock(t){this.$lockFunc=null}}function n(...t){var e=new c;return Object.assign(e,...t),new Proxy(e,{get:(t,e,l)=>(Reflect.get(t,"$lockFunc")&&t.$on(`change.${e}`,Reflect.get(t,"$lockFunc")),Reflect.get(t,e,l)),set(t){}})}export{l as NovyEvent,n as NovyVM};
